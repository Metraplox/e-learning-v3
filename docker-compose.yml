version: '3.8'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=development
      - PORT=4000
      - JWT_SECRET=CoD3r0$-AP1-G4t3w4y
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      users:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - '5672:5672'  # AMQP protocol port
      - '15672:15672'  # Management UI port
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  users:
    container_name: users-ms
    build:
      context: ./users-ms
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - ./users-ms:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=users_postgres_db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=users_db
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_QUEUE=users_queue
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: npm run start:dev

  postgres:
    container_name: users_postgres_db
    image: postgres:15.3-alpine
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payment-ms:
    container_name: payment-ms
    build:
      context: ./payment-ms  # Asegúrate de que este sea el directorio correcto para el Dockerfile del microservicio de pagos
      dockerfile: Dockerfile.payment
    ports:
      - '3001:3001'  # Expon el puerto 3001 para el microservicio de pagos
    environment:
      - NODE_ENV=development
      - PORT=3001
      - RABBITMQ_URL=amqp://rabbitmq:5672  # URL de RabbitMQ en la red de Docker
      - RABBITMQ_QUEUE=payment_queue
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: npm run start:prod  # Ajusta este comando según sea necesario

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
